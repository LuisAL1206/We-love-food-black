{"ast":null,"code":"import _defineProperty from \"/Users/AL1206/Desktop/35_frontend/b35-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/AL1206/Desktop/35_frontend/b35-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\n\nfunction useForm(callback, current = {}) {\n  const _useState = useState(current),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputs = _useState2[0],\n        setInputs = _useState2[1];\n\n  useEffect(() => {\n    console.log(current);\n\n    if (current.getSinglePost) {\n      delete current.getSinglePost.__typename;\n      setInputs(_objectSpread({}, current.getSinglePost));\n    }\n  }, [current]);\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    callback(inputs);\n  }; // cachar el submit de mi formulario\n\n\n  const handleInputChange = event => {\n    event.persist();\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setInputs(fields => _objectSpread({}, fields, {\n      [name]: value\n    })); // se va ejecutar cuando el onchange se ejecute en los inputs y se modifique el valor\n  };\n\n  return {\n    inputs,\n    handleSubmit,\n    handleInputChange\n  };\n}\n\nexport default useForm;","map":{"version":3,"sources":["/Users/AL1206/Desktop/35_frontend/b35-frontend/src/hooks/useForm.js"],"names":["useState","useEffect","useForm","callback","current","inputs","setInputs","console","log","getSinglePost","__typename","handleSubmit","event","preventDefault","handleInputChange","persist","target","name","value","fields"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,OAAO,GAAE,EAApC,EAAuC;AAAA,oBACPJ,QAAQ,CAACI,OAAD,CADD;AAAA;AAAA,QAC5BC,MAD4B;AAAA,QACpBC,SADoB;;AAGnCL,EAAAA,SAAS,CAAC,MAAI;AACVM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,QAAIA,OAAO,CAACK,aAAZ,EAA0B;AACtB,aAAOL,OAAO,CAACK,aAAR,CAAsBC,UAA7B;AACAJ,MAAAA,SAAS,mBAAKF,OAAO,CAACK,aAAb,EAAT;AACH;AACJ,GANQ,EAMN,CAACL,OAAD,CANM,CAAT;;AAQA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAGA,KAAH,EAAUA,KAAK,CAACC,cAAN;AACVV,IAAAA,QAAQ,CAACE,MAAD,CAAR;AACH,GAHD,CAXmC,CAchC;;;AAEH,QAAMS,iBAAiB,GAAIF,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACG,OAAN;AADiC,0BAEXH,KAAK,CAACI,MAFK;AAAA,UAE1BC,IAF0B,iBAE1BA,IAF0B;AAAA,UAEpBC,KAFoB,iBAEpBA,KAFoB;AAGjCZ,IAAAA,SAAS,CAACa,MAAM,sBAAUA,MAAV;AAAiB,OAACF,IAAD,GAAQC;AAAzB,MAAP,CAAT,CAHiC,CAGmB;AACvD,GAJD;;AAMA,SAAO;AACHb,IAAAA,MADG;AAEHM,IAAAA,YAFG;AAGHG,IAAAA;AAHG,GAAP;AAKH;;AAED,eAAeZ,OAAf","sourcesContent":["import { useState, useEffect} from 'react';\n\nfunction useForm(callback, current= {}){\n    const [inputs, setInputs] = useState(current);\n\n    useEffect(()=>{\n        console.log(current)\n        if (current.getSinglePost){\n            delete current.getSinglePost.__typename\n            setInputs({...current.getSinglePost})\n        }\n    }, [current])\n\n    const handleSubmit = (event) => {\n        if(event) event.preventDefault();\n        callback(inputs);\n    }; // cachar el submit de mi formulario\n\n    const handleInputChange = (event) => {\n        event.persist();\n        const {name, value} = event.target\n        setInputs(fields => ({ ...fields,[name]: value })); // se va ejecutar cuando el onchange se ejecute en los inputs y se modifique el valor\n    }\n\n    return {\n        inputs,\n        handleSubmit,\n        handleInputChange,\n    }\n}\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}